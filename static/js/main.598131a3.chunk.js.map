{"version":3,"sources":["api.js","App.jsx","serviceWorker.js","index.js"],"names":["axios","defaults","baseURL","containerStyle","display","justifyContent","Categories","data","events","loading","length","Body","map","i","key","id","name","style","gridTemplateColumns","gridColumnGap","filter","event","categoryId","k","Header","Title","Content","description","location","date","alignSelf","App","useState","setLoading","categories","setCategories","setEvents","useEffect","all","get","then","spread","primary","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gNAEAA,IAAMC,SAASC,QAAU,yBAElB,ICCDC,EAAiB,CACrBC,QAAS,OACTC,eAAgB,iBAiClB,IAAMC,EAAa,SAAC,GAAyC,IAAD,IAAtCC,YAAsC,MAA/B,GAA+B,MAA3BC,cAA2B,MAAlB,GAAkB,EAAdC,EAAc,EAAdA,QAC5C,OAAIF,EAAKG,OAAS,GAAKD,EAEnB,kBAAC,OAAD,KACE,kBAAC,OAAKE,KAAN,KACE,kBAAC,YAAD,KACE,kBAAC,QAAD,sBAMHJ,EAAKK,KAAI,SAAAC,GAAC,OACf,kBAAC,OAAD,CAAMC,IAAKD,EAAEE,IACX,kBAAC,OAAKJ,KAAN,KACE,kBAAC,YAAD,KACE,kBAAC,QAAD,KAAQE,EAAEG,QAGd,kBAAC,YAAD,CACEC,MAAO,CACLb,QAAS,OACTc,oBAAqB,cACrBC,cAAe,SAGhBX,EACEY,QAAO,SAAAC,GAAK,OAAIA,EAAMC,aAAeT,EAAEE,MACvCH,KAAI,SAACS,EAAOE,GAAR,OACH,kBAAC,OAAD,CAAMT,IAAKS,GACT,kBAAC,OAAKC,OAAN,KACE,kBAAC,OAAKA,OAAOC,MAAb,KAAoBJ,EAAML,OAE5B,kBAAC,OAAKU,QAAN,KACE,kBAAC,UAAD,KACE,0CADF,KACuBL,EAAMM,YAC3B,6BACA,uCAHF,KAGoBN,EAAMO,SACxB,6BACA,mCALF,KAKgBP,EAAMQ,KACpB,kBAAC,SAAD,CAAQZ,MAAO,CAAEa,UAAW,aAA5B,oBAcHC,EApFf,WAAgB,IAAD,EACiBC,oBAAS,GAD1B,mBACNvB,EADM,KACGwB,EADH,OAEuBD,mBAAS,IAFhC,mBAENE,EAFM,KAEMC,EAFN,OAGeH,mBAAS,IAHxB,mBAGNxB,EAHM,KAGE4B,EAHF,KAeb,OAVAC,qBAAU,WACRrC,IAAMsC,IAAI,CDZqBtC,IAAMuC,IAAI,eAEdvC,IAAMuC,IAAI,aCUKC,KACxCxC,IAAMyC,QAAO,SAASP,EAAY1B,GAChC2B,EAAcD,EAAW3B,MACzB6B,EAAU5B,EAAOD,MACjB0B,GAAW,SAGd,CAACA,EAAYE,IAGd,oCACE,kBAAC,OAAD,KACE,kBAAC,OAAKxB,KAAN,KACE,kBAAC,YAAD,CAAWM,MAAOd,GAChB,kBAAC,QAAD,0BACA,kBAAC,SAAD,CAAQuC,SAAO,GAAf,sBAIN,kBAAC,EAAD,CAAYnC,KAAM2B,EAAYzB,QAASA,EAASD,OAAQA,MCvB1CmC,QACW,cAA7BC,OAAOhB,SAASiB,UAEe,UAA7BD,OAAOhB,SAASiB,UAEhBD,OAAOhB,SAASiB,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAAAc,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.598131a3.chunk.js","sourcesContent":["import axios from \"axios\";\n\naxios.defaults.baseURL = \"http://localhost:3001/\";\n\nexport const getCategories = () => axios.get(\"/categories\");\n\nexport const getEvents = () => axios.get(\"/events\");\n\n/**\n *\n * @param {{name: String, category: Number}} event\n */\nexport const createEvent = event => axios.post({ url: \"/events\", data: event });\n","import axios from \"axios\";\nimport React, { useState, useEffect } from \"react\";\nimport { Button, Card, Content, Container, Hero, Title } from \"reactbulma\";\nimport { getCategories, getEvents } from \"./api\";\n\nconst containerStyle = {\n  display: \"flex\",\n  justifyContent: \"space-between\"\n};\n\nfunction App() {\n  const [loading, setLoading] = useState(true);\n  const [categories, setCategories] = useState([]);\n  const [events, setEvents] = useState([]);\n\n  useEffect(() => {\n    axios.all([getCategories(), getEvents()]).then(\n      axios.spread(function(categories, events) {\n        setCategories(categories.data);\n        setEvents(events.data);\n        setLoading(false);\n      })\n    );\n  }, [setLoading, setCategories]);\n\n  return (\n    <>\n      <Hero>\n        <Hero.Body>\n          <Container style={containerStyle}>\n            <Title>Upcoming 5 events</Title>\n            <Button primary>Create Event + </Button>\n          </Container>\n        </Hero.Body>\n      </Hero>\n      <Categories data={categories} loading={loading} events={events} />\n    </>\n  );\n}\n\nconst Categories = ({ data = [], events = [], loading }) => {\n  if (data.length < 0 || loading) {\n    return (\n      <Hero>\n        <Hero.Body>\n          <Container>\n            <Title>Loading...</Title>\n          </Container>\n        </Hero.Body>\n      </Hero>\n    );\n  }\n  return data.map(i => (\n    <Hero key={i.id}>\n      <Hero.Body>\n        <Container>\n          <Title>{i.name}</Title>\n        </Container>\n      </Hero.Body>\n      <Container\n        style={{\n          display: \"grid\",\n          gridTemplateColumns: \"1fr 1fr 1fr\",\n          gridColumnGap: \"3rem\"\n        }}\n      >\n        {events\n          .filter(event => event.categoryId === i.id)\n          .map((event, k) => (\n            <Card key={k}>\n              <Card.Header>\n                <Card.Header.Title>{event.name}</Card.Header.Title>\n              </Card.Header>\n              <Card.Content>\n                <Content>\n                  <b>Description</b>: {event.description}\n                  <br />\n                  <b>Location</b>: {event.location}\n                  <br />\n                  <b>Date</b>: {event.date}\n                  <Button style={{ alignSelf: \"flex-end\" }}>JOIN</Button>\n                </Content>\n              </Card.Content>\n            </Card>\n          ))}\n      </Container>\n    </Hero>\n  ));\n};\n\n// const Events = () => (\n\n// )\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}